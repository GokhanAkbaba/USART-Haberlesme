
Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ebc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030d4  080030d4  000130d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  2000000c  080030f0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000b8  080030f0  000200b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ea53  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d86  00000000  00000000  0002ea8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006c0  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005e8  00000000  00000000  00030ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c17  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c1c  00000000  00000000  000350d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037cf3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001964  00000000  00000000  00037d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800306c 	.word	0x0800306c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800306c 	.word	0x0800306c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b97a 	b.w	8000514 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	468c      	mov	ip, r1
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	9e08      	ldr	r6, [sp, #32]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d151      	bne.n	80002ec <__udivmoddi4+0xb4>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d96d      	bls.n	800032a <__udivmoddi4+0xf2>
 800024e:	fab2 fe82 	clz	lr, r2
 8000252:	f1be 0f00 	cmp.w	lr, #0
 8000256:	d00b      	beq.n	8000270 <__udivmoddi4+0x38>
 8000258:	f1ce 0c20 	rsb	ip, lr, #32
 800025c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000260:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000264:	fa02 f70e 	lsl.w	r7, r2, lr
 8000268:	ea4c 0c05 	orr.w	ip, ip, r5
 800026c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000270:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000274:	0c25      	lsrs	r5, r4, #16
 8000276:	fbbc f8fa 	udiv	r8, ip, sl
 800027a:	fa1f f987 	uxth.w	r9, r7
 800027e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000282:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000286:	fb08 f309 	mul.w	r3, r8, r9
 800028a:	42ab      	cmp	r3, r5
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x6c>
 800028e:	19ed      	adds	r5, r5, r7
 8000290:	f108 32ff 	add.w	r2, r8, #4294967295
 8000294:	f080 8123 	bcs.w	80004de <__udivmoddi4+0x2a6>
 8000298:	42ab      	cmp	r3, r5
 800029a:	f240 8120 	bls.w	80004de <__udivmoddi4+0x2a6>
 800029e:	f1a8 0802 	sub.w	r8, r8, #2
 80002a2:	443d      	add	r5, r7
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002ac:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b4:	fb00 f909 	mul.w	r9, r0, r9
 80002b8:	45a1      	cmp	r9, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x98>
 80002bc:	19e4      	adds	r4, r4, r7
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c2:	f080 810a 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80002c6:	45a1      	cmp	r9, r4
 80002c8:	f240 8107 	bls.w	80004da <__udivmoddi4+0x2a2>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	eba4 0409 	sub.w	r4, r4, r9
 80002d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d8:	2100      	movs	r1, #0
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d061      	beq.n	80003a2 <__udivmoddi4+0x16a>
 80002de:	fa24 f40e 	lsr.w	r4, r4, lr
 80002e2:	2300      	movs	r3, #0
 80002e4:	6034      	str	r4, [r6, #0]
 80002e6:	6073      	str	r3, [r6, #4]
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xc8>
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d054      	beq.n	800039e <__udivmoddi4+0x166>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	f040 808e 	bne.w	8000426 <__udivmoddi4+0x1ee>
 800030a:	42ab      	cmp	r3, r5
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xdc>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80fa 	bhi.w	8000508 <__udivmoddi4+0x2d0>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb65 0503 	sbc.w	r5, r5, r3
 800031a:	2001      	movs	r0, #1
 800031c:	46ac      	mov	ip, r5
 800031e:	2e00      	cmp	r6, #0
 8000320:	d03f      	beq.n	80003a2 <__udivmoddi4+0x16a>
 8000322:	e886 1010 	stmia.w	r6, {r4, ip}
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b912      	cbnz	r2, 8000332 <__udivmoddi4+0xfa>
 800032c:	2701      	movs	r7, #1
 800032e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000332:	fab7 fe87 	clz	lr, r7
 8000336:	f1be 0f00 	cmp.w	lr, #0
 800033a:	d134      	bne.n	80003a6 <__udivmoddi4+0x16e>
 800033c:	1beb      	subs	r3, r5, r7
 800033e:	0c3a      	lsrs	r2, r7, #16
 8000340:	fa1f fc87 	uxth.w	ip, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb3 f8f2 	udiv	r8, r3, r2
 800034a:	0c25      	lsrs	r5, r4, #16
 800034c:	fb02 3318 	mls	r3, r2, r8, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb0c f308 	mul.w	r3, ip, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x134>
 800035c:	19ed      	adds	r5, r5, r7
 800035e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x132>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f200 80d1 	bhi.w	800050c <__udivmoddi4+0x2d4>
 800036a:	4680      	mov	r8, r0
 800036c:	1aed      	subs	r5, r5, r3
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb5 f0f2 	udiv	r0, r5, r2
 8000374:	fb02 5510 	mls	r5, r2, r0, r5
 8000378:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800037c:	fb0c fc00 	mul.w	ip, ip, r0
 8000380:	45a4      	cmp	ip, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x15c>
 8000384:	19e4      	adds	r4, r4, r7
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x15a>
 800038c:	45a4      	cmp	ip, r4
 800038e:	f200 80b8 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 040c 	sub.w	r4, r4, ip
 8000398:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800039c:	e79d      	b.n	80002da <__udivmoddi4+0xa2>
 800039e:	4631      	mov	r1, r6
 80003a0:	4630      	mov	r0, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	f1ce 0420 	rsb	r4, lr, #32
 80003aa:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80003b2:	fa20 f804 	lsr.w	r8, r0, r4
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa25 f404 	lsr.w	r4, r5, r4
 80003bc:	ea48 0803 	orr.w	r8, r8, r3
 80003c0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c8:	fb02 4411 	mls	r4, r2, r1, r4
 80003cc:	fa1f fc87 	uxth.w	ip, r7
 80003d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d4:	fb01 f30c 	mul.w	r3, r1, ip
 80003d8:	42ab      	cmp	r3, r5
 80003da:	fa00 f40e 	lsl.w	r4, r0, lr
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1bc>
 80003e0:	19ed      	adds	r5, r5, r7
 80003e2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e6:	f080 808a 	bcs.w	80004fe <__udivmoddi4+0x2c6>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	f240 8087 	bls.w	80004fe <__udivmoddi4+0x2c6>
 80003f0:	3902      	subs	r1, #2
 80003f2:	443d      	add	r5, r7
 80003f4:	1aeb      	subs	r3, r5, r3
 80003f6:	fa1f f588 	uxth.w	r5, r8
 80003fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fe:	fb02 3310 	mls	r3, r2, r0, r3
 8000402:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000406:	fb00 f30c 	mul.w	r3, r0, ip
 800040a:	42ab      	cmp	r3, r5
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1e6>
 800040e:	19ed      	adds	r5, r5, r7
 8000410:	f100 38ff 	add.w	r8, r0, #4294967295
 8000414:	d26f      	bcs.n	80004f6 <__udivmoddi4+0x2be>
 8000416:	42ab      	cmp	r3, r5
 8000418:	d96d      	bls.n	80004f6 <__udivmoddi4+0x2be>
 800041a:	3802      	subs	r0, #2
 800041c:	443d      	add	r5, r7
 800041e:	1aeb      	subs	r3, r5, r3
 8000420:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000424:	e78f      	b.n	8000346 <__udivmoddi4+0x10e>
 8000426:	f1c1 0720 	rsb	r7, r1, #32
 800042a:	fa22 f807 	lsr.w	r8, r2, r7
 800042e:	408b      	lsls	r3, r1
 8000430:	fa05 f401 	lsl.w	r4, r5, r1
 8000434:	ea48 0303 	orr.w	r3, r8, r3
 8000438:	fa20 fe07 	lsr.w	lr, r0, r7
 800043c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000440:	40fd      	lsrs	r5, r7
 8000442:	ea4e 0e04 	orr.w	lr, lr, r4
 8000446:	fbb5 f9fc 	udiv	r9, r5, ip
 800044a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000452:	fa1f f883 	uxth.w	r8, r3
 8000456:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800045a:	fb09 f408 	mul.w	r4, r9, r8
 800045e:	42ac      	cmp	r4, r5
 8000460:	fa02 f201 	lsl.w	r2, r2, r1
 8000464:	fa00 fa01 	lsl.w	sl, r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x244>
 800046a:	18ed      	adds	r5, r5, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	d243      	bcs.n	80004fa <__udivmoddi4+0x2c2>
 8000472:	42ac      	cmp	r4, r5
 8000474:	d941      	bls.n	80004fa <__udivmoddi4+0x2c2>
 8000476:	f1a9 0902 	sub.w	r9, r9, #2
 800047a:	441d      	add	r5, r3
 800047c:	1b2d      	subs	r5, r5, r4
 800047e:	fa1f fe8e 	uxth.w	lr, lr
 8000482:	fbb5 f0fc 	udiv	r0, r5, ip
 8000486:	fb0c 5510 	mls	r5, ip, r0, r5
 800048a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048e:	fb00 f808 	mul.w	r8, r0, r8
 8000492:	45a0      	cmp	r8, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x26e>
 8000496:	18e4      	adds	r4, r4, r3
 8000498:	f100 35ff 	add.w	r5, r0, #4294967295
 800049c:	d229      	bcs.n	80004f2 <__udivmoddi4+0x2ba>
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d927      	bls.n	80004f2 <__udivmoddi4+0x2ba>
 80004a2:	3802      	subs	r0, #2
 80004a4:	441c      	add	r4, r3
 80004a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004aa:	eba4 0408 	sub.w	r4, r4, r8
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	454c      	cmp	r4, r9
 80004b4:	46c6      	mov	lr, r8
 80004b6:	464d      	mov	r5, r9
 80004b8:	d315      	bcc.n	80004e6 <__udivmoddi4+0x2ae>
 80004ba:	d012      	beq.n	80004e2 <__udivmoddi4+0x2aa>
 80004bc:	b156      	cbz	r6, 80004d4 <__udivmoddi4+0x29c>
 80004be:	ebba 030e 	subs.w	r3, sl, lr
 80004c2:	eb64 0405 	sbc.w	r4, r4, r5
 80004c6:	fa04 f707 	lsl.w	r7, r4, r7
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431f      	orrs	r7, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	6037      	str	r7, [r6, #0]
 80004d2:	6074      	str	r4, [r6, #4]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	4618      	mov	r0, r3
 80004dc:	e6f8      	b.n	80002d0 <__udivmoddi4+0x98>
 80004de:	4690      	mov	r8, r2
 80004e0:	e6e0      	b.n	80002a4 <__udivmoddi4+0x6c>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2ea      	bcs.n	80004bc <__udivmoddi4+0x284>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb69 0503 	sbc.w	r5, r9, r3
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7e4      	b.n	80004bc <__udivmoddi4+0x284>
 80004f2:	4628      	mov	r0, r5
 80004f4:	e7d7      	b.n	80004a6 <__udivmoddi4+0x26e>
 80004f6:	4640      	mov	r0, r8
 80004f8:	e791      	b.n	800041e <__udivmoddi4+0x1e6>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e7be      	b.n	800047c <__udivmoddi4+0x244>
 80004fe:	4601      	mov	r1, r0
 8000500:	e778      	b.n	80003f4 <__udivmoddi4+0x1bc>
 8000502:	3802      	subs	r0, #2
 8000504:	443c      	add	r4, r7
 8000506:	e745      	b.n	8000394 <__udivmoddi4+0x15c>
 8000508:	4608      	mov	r0, r1
 800050a:	e708      	b.n	800031e <__udivmoddi4+0xe6>
 800050c:	f1a8 0802 	sub.w	r8, r8, #2
 8000510:	443d      	add	r5, r7
 8000512:	e72b      	b.n	800036c <__udivmoddi4+0x134>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f923 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f806 	bl	8000534 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fbf4 	bl	8002d14 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f93d 	bl	80007d2 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f905 	bl	800077e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_GetTick+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028

080005d4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <NVIC_SetPriorityGrouping+0x40>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <NVIC_SetPriorityGrouping+0x44>)
 80005fe:	4313      	orrs	r3, r2
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <NVIC_SetPriorityGrouping+0x40>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00
 8000618:	05fa0000 	.word	0x05fa0000

0800061c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <NVIC_GetPriorityGrouping+0x18>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	0a1b      	lsrs	r3, r3, #8
 8000626:	f003 0307 	and.w	r3, r3, #7
}
 800062a:	4618      	mov	r0, r3
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000642:	4909      	ldr	r1, [pc, #36]	; (8000668 <NVIC_EnableIRQ+0x30>)
 8000644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000648:	095b      	lsrs	r3, r3, #5
 800064a:	79fa      	ldrb	r2, [r7, #7]
 800064c:	f002 021f 	and.w	r2, r2, #31
 8000650:	2001      	movs	r0, #1
 8000652:	fa00 f202 	lsl.w	r2, r0, r2
 8000656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100

0800066c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	da0b      	bge.n	8000698 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	490d      	ldr	r1, [pc, #52]	; (80006b8 <NVIC_SetPriority+0x4c>)
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	3b04      	subs	r3, #4
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000696:	e009      	b.n	80006ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	4908      	ldr	r1, [pc, #32]	; (80006bc <NVIC_SetPriority+0x50>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	b2d2      	uxtb	r2, r2
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00
 80006bc:	e000e100 	.word	0xe000e100

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	2201      	movs	r2, #1
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	401a      	ands	r2, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000706:	2101      	movs	r1, #1
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	1e59      	subs	r1, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	; 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff90 	bl	800066c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff2f 	bl	80005d4 <NVIC_SetPriorityGrouping>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
 800078a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000790:	f7ff ff44 	bl	800061c <NVIC_GetPriorityGrouping>
 8000794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6978      	ldr	r0, [r7, #20]
 800079c:	f7ff ff90 	bl	80006c0 <NVIC_EncodePriority>
 80007a0:	4602      	mov	r2, r0
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff5f 	bl	800066c <NVIC_SetPriority>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff37 	bl	8000638 <NVIC_EnableIRQ>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffa2 	bl	8000724 <SysTick_Config>
 80007e0:	4603      	mov	r3, r0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d106      	bne.n	8000808 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000806:	e005      	b.n	8000814 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f023 0304 	bic.w	r3, r3, #4
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e010 	.word	0xe000e010

08000824 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000828:	f000 f802 	bl	8000830 <HAL_SYSTICK_Callback>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b02      	cmp	r3, #2
 8000850:	d004      	beq.n	800085c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	e00c      	b.n	8000876 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2205      	movs	r2, #5
 8000860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	6812      	ldr	r2, [r2, #0]
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	f022 0201 	bic.w	r2, r2, #1
 8000872:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
 80008a2:	e175      	b.n	8000b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80008a4:	2201      	movs	r2, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4013      	ands	r3, r2
 80008b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	429a      	cmp	r2, r3
 80008be:	f040 8164 	bne.w	8000b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_Init+0x4e>
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d123      	bne.n	800091a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	691a      	ldr	r2, [r3, #16]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4313      	orrs	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	69b9      	ldr	r1, [r7, #24]
 8000916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4013      	ands	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0203 	and.w	r2, r3, #3
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4313      	orrs	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d00b      	beq.n	800096e <HAL_GPIO_Init+0xea>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d007      	beq.n	800096e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000962:	2b11      	cmp	r3, #17
 8000964:	d003      	beq.n	800096e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b12      	cmp	r3, #18
 800096c:	d130      	bne.n	80009d0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	69ba      	ldr	r2, [r7, #24]
 8000994:	4313      	orrs	r3, r2
 8000996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a4:	2201      	movs	r2, #1
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	091b      	lsrs	r3, r3, #4
 80009ba:	f003 0201 	and.w	r2, r3, #1
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	2203      	movs	r2, #3
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 80be 	beq.w	8000b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4a65      	ldr	r2, [pc, #404]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a10:	4b64      	ldr	r3, [pc, #400]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000a26:	4a60      	ldr	r2, [pc, #384]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a57      	ldr	r2, [pc, #348]	; (8000bac <HAL_GPIO_Init+0x328>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d037      	beq.n	8000ac2 <HAL_GPIO_Init+0x23e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a56      	ldr	r2, [pc, #344]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d031      	beq.n	8000abe <HAL_GPIO_Init+0x23a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a55      	ldr	r2, [pc, #340]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d02b      	beq.n	8000aba <HAL_GPIO_Init+0x236>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <HAL_GPIO_Init+0x334>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d025      	beq.n	8000ab6 <HAL_GPIO_Init+0x232>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <HAL_GPIO_Init+0x338>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d01f      	beq.n	8000ab2 <HAL_GPIO_Init+0x22e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a52      	ldr	r2, [pc, #328]	; (8000bc0 <HAL_GPIO_Init+0x33c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d019      	beq.n	8000aae <HAL_GPIO_Init+0x22a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <HAL_GPIO_Init+0x340>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d013      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <HAL_GPIO_Init+0x344>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d00d      	beq.n	8000aa6 <HAL_GPIO_Init+0x222>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <HAL_GPIO_Init+0x348>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d007      	beq.n	8000aa2 <HAL_GPIO_Init+0x21e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_GPIO_Init+0x21a>
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	e012      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	e010      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	e00e      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	e00c      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aaa:	2306      	movs	r3, #6
 8000aac:	e00a      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e008      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e004      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aba:	2302      	movs	r3, #2
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	69fa      	ldr	r2, [r7, #28]
 8000ac6:	f002 0203 	and.w	r2, r2, #3
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4093      	lsls	r3, r2
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ad4:	4934      	ldr	r1, [pc, #208]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	f67f ae86 	bls.w	80008a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3724      	adds	r7, #36	; 0x24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40021400 	.word	0x40021400
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40021c00 	.word	0x40021c00
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	40022400 	.word	0x40022400
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e25c      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8087 	beq.w	8000d0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bfc:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d00c      	beq.n	8000c22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c08:	4b93      	ldr	r3, [pc, #588]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d112      	bne.n	8000c3a <HAL_RCC_OscConfig+0x62>
 8000c14:	4b90      	ldr	r3, [pc, #576]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c20:	d10b      	bne.n	8000c3a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c22:	4b8d      	ldr	r3, [pc, #564]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d06c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x130>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d168      	bne.n	8000d08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e236      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x7a>
 8000c44:	4a84      	ldr	r2, [pc, #528]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c46:	4b84      	ldr	r3, [pc, #528]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e02e      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd8>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x9c>
 8000c5a:	4a7f      	ldr	r2, [pc, #508]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c5c:	4b7e      	ldr	r3, [pc, #504]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4a7c      	ldr	r2, [pc, #496]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c68:	4b7b      	ldr	r3, [pc, #492]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01d      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd8>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0xc0>
 8000c7e:	4a76      	ldr	r2, [pc, #472]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c80:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4a73      	ldr	r2, [pc, #460]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c8c:	4b72      	ldr	r3, [pc, #456]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd8>
 8000c98:	4a6f      	ldr	r2, [pc, #444]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c9a:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4a6c      	ldr	r2, [pc, #432]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000ca6:	4b6c      	ldr	r3, [pc, #432]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d013      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fc80 	bl	80005bc <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fc7c 	bl	80005bc <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e1ea      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4b61      	ldr	r3, [pc, #388]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0xe8>
 8000cde:	e014      	b.n	8000d0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc6c 	bl	80005bc <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fc68 	bl	80005bc <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e1d6      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	4b57      	ldr	r3, [pc, #348]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x110>
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d069      	beq.n	8000dea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d22:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d11c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x190>
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d116      	bne.n	8000d68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x17a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d001      	beq.n	8000d52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e1aa      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	4941      	ldr	r1, [pc, #260]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	e040      	b.n	8000dea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d023      	beq.n	8000db8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d70:	4a39      	ldr	r2, [pc, #228]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc1e 	bl	80005bc <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc1a 	bl	80005bc <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e188      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0f0      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	492d      	ldr	r1, [pc, #180]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
 8000db6:	e018      	b.n	8000dea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fbfa 	bl	80005bc <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fbf6 	bl	80005bc <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e164      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1f0      	bne.n	8000dcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d038      	beq.n	8000e68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d019      	beq.n	8000e32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbd7 	bl	80005bc <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e12:	f7ff fbd3 	bl	80005bc <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e141      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x23a>
 8000e30:	e01a      	b.n	8000e68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_RCC_OscConfig+0x280>)
 8000e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e3e:	f7ff fbbd 	bl	80005bc <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e46:	f7ff fbb9 	bl	80005bc <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d903      	bls.n	8000e5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e127      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
 8000e58:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5c:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ee      	bne.n	8000e46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a4 	beq.w	8000fbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b8e      	ldr	r3, [pc, #568]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10d      	bne.n	8000e9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4a8b      	ldr	r2, [pc, #556]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000e84:	4b8a      	ldr	r3, [pc, #552]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b88      	ldr	r3, [pc, #544]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e9e:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <HAL_RCC_OscConfig+0x4dc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d118      	bne.n	8000edc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000eaa:	4a82      	ldr	r2, [pc, #520]	; (80010b4 <HAL_RCC_OscConfig+0x4dc>)
 8000eac:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <HAL_RCC_OscConfig+0x4dc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb6:	f7ff fb81 	bl	80005bc <HAL_GetTick>
 8000eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ebc:	e008      	b.n	8000ed0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000ebe:	f7ff fb7d 	bl	80005bc <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b64      	cmp	r3, #100	; 0x64
 8000eca:	d901      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e0eb      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ed0:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <HAL_RCC_OscConfig+0x4dc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0f0      	beq.n	8000ebe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d106      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x31a>
 8000ee4:	4a72      	ldr	r2, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef0:	e02d      	b.n	8000f4e <HAL_RCC_OscConfig+0x376>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d10c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x33c>
 8000efa:	4a6d      	ldr	r2, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000efc:	4b6c      	ldr	r3, [pc, #432]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6713      	str	r3, [r2, #112]	; 0x70
 8000f06:	4a6a      	ldr	r2, [pc, #424]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	6713      	str	r3, [r2, #112]	; 0x70
 8000f12:	e01c      	b.n	8000f4e <HAL_RCC_OscConfig+0x376>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x35e>
 8000f1c:	4a64      	ldr	r2, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6713      	str	r3, [r2, #112]	; 0x70
 8000f28:	4a61      	ldr	r2, [pc, #388]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f2a:	4b61      	ldr	r3, [pc, #388]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6713      	str	r3, [r2, #112]	; 0x70
 8000f34:	e00b      	b.n	8000f4e <HAL_RCC_OscConfig+0x376>
 8000f36:	4a5e      	ldr	r2, [pc, #376]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f38:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6713      	str	r3, [r2, #112]	; 0x70
 8000f42:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f44:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb31 	bl	80005bc <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb2d 	bl	80005bc <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e099      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	4b4e      	ldr	r3, [pc, #312]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ee      	beq.n	8000f5e <HAL_RCC_OscConfig+0x386>
 8000f80:	e014      	b.n	8000fac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb1b 	bl	80005bc <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb17 	bl	80005bc <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e083      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d06f      	beq.n	80010a6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d067      	beq.n	80010a2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d149      	bne.n	800106e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fda:	4a35      	ldr	r2, [pc, #212]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fdc:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fae9 	bl	80005bc <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff fae5 	bl	80005bc <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e053      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800100c:	4928      	ldr	r1, [pc, #160]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	085b      	lsrs	r3, r3, #1
 8001026:	3b01      	subs	r3, #1
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	061b      	lsls	r3, r3, #24
 8001032:	4313      	orrs	r3, r2
 8001034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001038:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800103a:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001046:	f7ff fab9 	bl	80005bc <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fab5 	bl	80005bc <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e023      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x476>
 800106c:	e01b      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107a:	f7ff fa9f 	bl	80005bc <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff fa9b 	bl	80005bc <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e009      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_RCC_OscConfig+0x4d8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x4aa>
 80010a0:	e001      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0ce      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 020f 	and.w	r2, r3, #15
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d210      	bcs.n	8001100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4966      	ldr	r1, [pc, #408]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 020f 	bic.w	r2, r3, #15
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b62      	ldr	r3, [pc, #392]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 020f 	and.w	r2, r3, #15
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b6      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4b58      	ldr	r3, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800113a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	494f      	ldr	r1, [pc, #316]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b46      	ldr	r3, [pc, #280]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07d      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b40      	ldr	r3, [pc, #256]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e071      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e069      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4938      	ldr	r1, [pc, #224]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 0203 	bic.w	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa06 	bl	80005bc <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff fa02 	bl	80005bc <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e051      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b26      	ldr	r3, [pc, #152]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 020f 	and.w	r2, r3, #15
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d910      	bls.n	800120c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4923      	ldr	r1, [pc, #140]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 020f 	bic.w	r2, r3, #15
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 020f 	and.w	r2, r3, #15
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e030      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4918      	ldr	r1, [pc, #96]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4911      	ldr	r1, [pc, #68]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f81d 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 800124e:	4601      	mov	r1, r0
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_RCC_ClockConfig+0x1c8>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	fa21 f303 	lsr.w	r3, r1, r3
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_RCC_ClockConfig+0x1cc>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff f964 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023c00 	.word	0x40023c00
 800127c:	40023800 	.word	0x40023800
 8001280:	080030bc 	.word	0x080030bc
 8001284:	20000008 	.word	0x20000008

08001288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800128c:	b08f      	sub	sp, #60	; 0x3c
 800128e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a0:	4b62      	ldr	r3, [pc, #392]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d007      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x34>
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d008      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 80b2 	bne.w	800141a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012ba:	e0b1      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012c0:	e0ae      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c2:	4b5a      	ldr	r3, [pc, #360]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012cc:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d04e      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	f04f 0400 	mov.w	r4, #0
 80012e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	ea01 0103 	and.w	r1, r1, r3
 80012ee:	ea02 0204 	and.w	r2, r2, r4
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	0160      	lsls	r0, r4, #5
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24
 80012fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012fc:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001300:	6278      	str	r0, [r7, #36]	; 0x24
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	623b      	str	r3, [r7, #32]
 8001306:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800130a:	1a5b      	subs	r3, r3, r1
 800130c:	eb64 0402 	sbc.w	r4, r4, r2
 8001310:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001314:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001318:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800131c:	ebb8 0803 	subs.w	r8, r8, r3
 8001320:	eb69 0904 	sbc.w	r9, r9, r4
 8001324:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800133c:	eb18 0801 	adds.w	r8, r8, r1
 8001340:	eb49 0902 	adc.w	r9, r9, r2
 8001344:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800135c:	4640      	mov	r0, r8
 800135e:	4649      	mov	r1, r9
 8001360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	461a      	mov	r2, r3
 8001368:	4623      	mov	r3, r4
 800136a:	f7fe ff4d 	bl	8000208 <__aeabi_uldivmod>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
 8001374:	e043      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	099b      	lsrs	r3, r3, #6
 800137c:	f04f 0400 	mov.w	r4, #0
 8001380:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	ea01 0103 	and.w	r1, r1, r3
 800138c:	ea02 0204 	and.w	r2, r2, r4
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	0160      	lsls	r0, r4, #5
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	015b      	lsls	r3, r3, #5
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	eb64 0402 	sbc.w	r4, r4, r2
 80013ae:	01a6      	lsls	r6, r4, #6
 80013b0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013b4:	019d      	lsls	r5, r3, #6
 80013b6:	1aed      	subs	r5, r5, r3
 80013b8:	eb66 0604 	sbc.w	r6, r6, r4
 80013bc:	00f3      	lsls	r3, r6, #3
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	00eb      	lsls	r3, r5, #3
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80013d0:	186d      	adds	r5, r5, r1
 80013d2:	eb46 0602 	adc.w	r6, r6, r2
 80013d6:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80013da:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80013de:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80013e2:	4655      	mov	r5, sl
 80013e4:	465e      	mov	r6, fp
 80013e6:	4628      	mov	r0, r5
 80013e8:	4631      	mov	r1, r6
 80013ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ec:	f04f 0400 	mov.w	r4, #0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7fe ff08 	bl	8000208 <__aeabi_uldivmod>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	3301      	adds	r3, #1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800140e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001418:	e002      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800141e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001422:	4618      	mov	r0, r3
 8001424:	373c      	adds	r7, #60	; 0x3c
 8001426:	46bd      	mov	sp, r7
 8001428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	00f42400 	.word	0x00f42400
 8001434:	007a1200 	.word	0x007a1200

08001438 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_RCC_GetHCLKFreq+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001454:	f7ff fff0 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001458:	4601      	mov	r1, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	080030cc 	.word	0x080030cc

08001478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800147c:	f7ff ffdc 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001480:	4601      	mov	r1, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0b5b      	lsrs	r3, r3, #13
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK2Freq+0x24>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	080030cc 	.word	0x080030cc

080014a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d012      	beq.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80014c8:	4a69      	ldr	r2, [pc, #420]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ca:	4b69      	ldr	r3, [pc, #420]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014d2:	6093      	str	r3, [r2, #8]
 80014d4:	4966      	ldr	r1, [pc, #408]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d6:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 80014ea:	2301      	movs	r3, #1
 80014ec:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d017      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014fa:	495d      	ldr	r1, [pc, #372]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014fc:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	4313      	orrs	r3, r2
 800150c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001518:	d101      	bne.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d017      	beq.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001536:	494e      	ldr	r1, [pc, #312]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001538:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800153a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001554:	d101      	bne.n	800155a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8001556:	2301      	movs	r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8001572:	2301      	movs	r3, #1
 8001574:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 808b 	beq.w	800169a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	4a3a      	ldr	r2, [pc, #232]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800159c:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a8:	f7ff f808 	bl	80005bc <HAL_GetTick>
 80015ac:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff f804 	bl	80005bc <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e355      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80015c2:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80015ce:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d035      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d02e      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80015ec:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d014      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7fe ffcc 	bl	80005bc <HAL_GetTick>
 8001624:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7fe ffc8 	bl	80005bc <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d901      	bls.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e317      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0ee      	beq.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001656:	d111      	bne.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001668:	400b      	ands	r3, r1
 800166a:	4313      	orrs	r3, r2
 800166c:	6083      	str	r3, [r0, #8]
 800166e:	e00b      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	0ffffcff 	.word	0x0ffffcff
 800167c:	4ab0      	ldr	r2, [pc, #704]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800167e:	4bb0      	ldr	r3, [pc, #704]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001686:	6093      	str	r3, [r2, #8]
 8001688:	49ad      	ldr	r1, [pc, #692]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800168a:	4bad      	ldr	r3, [pc, #692]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800168c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	4313      	orrs	r3, r2
 8001698:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80016a6:	4aa6      	ldr	r2, [pc, #664]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016a8:	4ba5      	ldr	r3, [pc, #660]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b6:	49a2      	ldr	r1, [pc, #648]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016b8:	4ba1      	ldr	r3, [pc, #644]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00a      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016d4:	499a      	ldr	r1, [pc, #616]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d6:	4b9a      	ldr	r3, [pc, #616]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016e4:	4313      	orrs	r3, r2
 80016e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80016f6:	4992      	ldr	r1, [pc, #584]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016f8:	4b91      	ldr	r3, [pc, #580]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00a      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001718:	4989      	ldr	r1, [pc, #548]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800171a:	4b89      	ldr	r3, [pc, #548]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001728:	4313      	orrs	r3, r2
 800172a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800173a:	4981      	ldr	r1, [pc, #516]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173c:	4b80      	ldr	r3, [pc, #512]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4313      	orrs	r3, r2
 800174c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800175c:	4978      	ldr	r1, [pc, #480]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800175e:	4b78      	ldr	r3, [pc, #480]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	f023 0203 	bic.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	4313      	orrs	r3, r2
 800176e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00a      	beq.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800177e:	4970      	ldr	r1, [pc, #448]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001786:	f023 020c 	bic.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	4313      	orrs	r3, r2
 8001790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00a      	beq.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80017a0:	4967      	ldr	r1, [pc, #412]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a2:	4b67      	ldr	r3, [pc, #412]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4313      	orrs	r3, r2
 80017b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00a      	beq.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80017c2:	495f      	ldr	r1, [pc, #380]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	4313      	orrs	r3, r2
 80017d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00a      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80017e4:	4956      	ldr	r1, [pc, #344]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e6:	4b56      	ldr	r3, [pc, #344]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f4:	4313      	orrs	r3, r2
 80017f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00a      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001806:	494e      	ldr	r1, [pc, #312]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	4313      	orrs	r3, r2
 8001818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001828:	4945      	ldr	r1, [pc, #276]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800182c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001830:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00a      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800184a:	493d      	ldr	r1, [pc, #244]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	4313      	orrs	r3, r2
 800185c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00a      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800186c:	4934      	ldr	r1, [pc, #208]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d011      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800188e:	492c      	ldr	r1, [pc, #176]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800189e:	4313      	orrs	r3, r2
 80018a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018ac:	d101      	bne.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00a      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018ce:	491c      	ldr	r1, [pc, #112]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018f0:	4913      	ldr	r1, [pc, #76]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001916:	f040 80d8 	bne.w	8001aca <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001924:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001926:	f7fe fe49 	bl	80005bc <HAL_GetTick>
 800192a:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800192e:	f7fe fe45 	bl	80005bc <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d903      	bls.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e196      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001940:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1ee      	bne.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11d      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001964:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001978:	0e1b      	lsrs	r3, r3, #24
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001980:	495d      	ldr	r1, [pc, #372]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	019a      	lsls	r2, r3, #6
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	431a      	orrs	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	071b      	lsls	r3, r3, #28
 800199a:	4313      	orrs	r3, r2
 800199c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019b4:	d00a      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d02e      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ca:	d129      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d2:	0c1b      	lsrs	r3, r3, #16
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019e0:	0f1b      	lsrs	r3, r3, #28
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80019e8:	4943      	ldr	r1, [pc, #268]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	019a      	lsls	r2, r3, #6
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	071b      	lsls	r3, r3, #28
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8001a08:	493b      	ldr	r1, [pc, #236]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a10:	f023 021f 	bic.w	r2, r3, #31
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01d      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a32:	0e1b      	lsrs	r3, r3, #24
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a40:	0f1b      	lsrs	r3, r3, #28
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001a48:	492b      	ldr	r1, [pc, #172]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	019a      	lsls	r2, r3, #6
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	071b      	lsls	r3, r3, #28
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d011      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a74:	4920      	ldr	r1, [pc, #128]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	019a      	lsls	r2, r3, #6
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	061b      	lsls	r3, r3, #24
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	071b      	lsls	r3, r3, #28
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001a98:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7fe fd8a 	bl	80005bc <HAL_GetTick>
 8001aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001aac:	f7fe fd86 	bl	80005bc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e0d7      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 80cd 	bne.w	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ade:	f7fe fd6d 	bl	80005bc <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001ae6:	f7fe fd69 	bl	80005bc <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d903      	bls.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0ba      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001af8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001afc:	4b5e      	ldr	r3, [pc, #376]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b08:	d0ed      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02e      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d12a      	bne.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	0f1b      	lsrs	r3, r3, #28
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001b4e:	494a      	ldr	r1, [pc, #296]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	019a      	lsls	r2, r3, #6
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	071b      	lsls	r3, r3, #28
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001b6e:	4942      	ldr	r1, [pc, #264]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b9c:	d11d      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba4:	0e1b      	lsrs	r3, r3, #24
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	0f1b      	lsrs	r3, r3, #28
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001bba:	492f      	ldr	r1, [pc, #188]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	019a      	lsls	r2, r3, #6
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	071b      	lsls	r3, r3, #28
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d028      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bec:	0e1b      	lsrs	r3, r3, #24
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001c02:	491d      	ldr	r1, [pc, #116]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	019a      	lsls	r2, r3, #6
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	071b      	lsls	r3, r3, #28
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001c22:	4915      	ldr	r1, [pc, #84]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c38:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c42:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c44:	f7fe fcba 	bl	80005bc <HAL_GetTick>
 8001c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c4c:	f7fe fcb6 	bl	80005bc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e007      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c6a:	d1ef      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e043      	b.n	8001d16 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 f94a 	bl	8002f3c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fbf5 	bl	80024b0 <UART_SetConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e022      	b.n	8001d16 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fe57 	bl	800298c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	6852      	ldr	r2, [r2, #4]
 8001ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cfc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fede 	bl	8002ad0 <UART_CheckIdleState>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b088      	sub	sp, #32
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d175      	bne.n	8001e2a <HAL_UART_Transmit+0x10c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_UART_Transmit+0x2c>
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06e      	b.n	8001e2c <HAL_UART_Transmit+0x10e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_UART_Transmit+0x3e>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e067      	b.n	8001e2c <HAL_UART_Transmit+0x10e>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2221      	movs	r2, #33	; 0x21
 8001d6e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001d72:	f7fe fc23 	bl	80005bc <HAL_GetTick>
 8001d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	88fa      	ldrh	r2, [r7, #6]
 8001d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001d88:	e032      	b.n	8001df0 <HAL_UART_Transmit+0xd2>
    {
      huart->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fa0c 	bl	80021c4 <UART_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e03a      	b.n	8001e2c <HAL_UART_Transmit+0x10e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dbe:	d110      	bne.n	8001de2 <HAL_UART_Transmit+0xc4>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <HAL_UART_Transmit+0xc4>
      {
        tmp = (uint16_t*) pData;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	8812      	ldrh	r2, [r2, #0]
 8001dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	e006      	b.n	8001df0 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c59      	adds	r1, r3, #1
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	6293      	str	r3, [r2, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1c6      	bne.n	8001d8a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2200      	movs	r2, #0
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f9dc 	bl	80021c4 <UART_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_UART_Transmit+0xf8>
    {
      return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e00a      	b.n	8001e2c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_UART_Receive>:
  * @param Size amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	f040 80ac 	bne.w	8001fae <HAL_UART_Receive+0x17a>
  {
    if((pData == NULL ) || (Size == 0U))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <HAL_UART_Receive+0x2e>
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0a4      	b.n	8001fb0 <HAL_UART_Receive+0x17c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Receive+0x40>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e09d      	b.n	8001fb0 <HAL_UART_Receive+0x17c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2222      	movs	r2, #34	; 0x22
 8001e86:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fb97 	bl	80005bc <HAL_GetTick>
 8001e8e:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	88fa      	ldrh	r2, [r7, #6]
 8001e94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_UART_Receive+0x94>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_UART_Receive+0x8a>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001ebc:	e028      	b.n	8001f10 <HAL_UART_Receive+0xdc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	22ff      	movs	r2, #255	; 0xff
 8001ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001ec6:	e023      	b.n	8001f10 <HAL_UART_Receive+0xdc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_UART_Receive+0xb8>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_UART_Receive+0xae>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	22ff      	movs	r2, #255	; 0xff
 8001edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001ee0:	e016      	b.n	8001f10 <HAL_UART_Receive+0xdc>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	227f      	movs	r2, #127	; 0x7f
 8001ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001eea:	e011      	b.n	8001f10 <HAL_UART_Receive+0xdc>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_UART_Receive+0xdc>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d104      	bne.n	8001f08 <HAL_UART_Receive+0xd4>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	227f      	movs	r2, #127	; 0x7f
 8001f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8001f06:	e003      	b.n	8001f10 <HAL_UART_Receive+0xdc>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	223f      	movs	r2, #63	; 0x3f
 8001f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001f16:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001f18:	e039      	b.n	8001f8e <HAL_UART_Receive+0x15a>
    {
      huart->RxXferCount--;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2200      	movs	r2, #0
 8001f34:	2120      	movs	r1, #32
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f944 	bl	80021c4 <UART_WaitOnFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_UART_Receive+0x112>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e034      	b.n	8001fb0 <HAL_UART_Receive+0x17c>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4e:	d112      	bne.n	8001f76 <HAL_UART_Receive+0x142>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10e      	bne.n	8001f76 <HAL_UART_Receive+0x142>
      {
        tmp = (uint16_t*) pData ;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	8b7b      	ldrh	r3, [r7, #26]
 8001f66:	4013      	ands	r3, r2
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3302      	adds	r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	e00b      	b.n	8001f8e <HAL_UART_Receive+0x15a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f82:	b2d1      	uxtb	r1, r2
 8001f84:	8b7a      	ldrh	r2, [r7, #26]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	400a      	ands	r2, r1
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1bf      	bne.n	8001f1a <HAL_UART_Receive+0xe6>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_UART_Receive+0x17c>
  }
  else
  {
    return HAL_BUSY;
 8001fae:	2302      	movs	r3, #2
  }
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_UART_IRQHandler>:
  * @brief This function handles UART interrupt request.
  * @param huart uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	613b      	str	r3, [r7, #16]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	60fb      	str	r3, [r7, #12]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	60bb      	str	r3, [r7, #8]
  if (errorflags == RESET)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_UART_IRQHandler+0x4a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_UART_IRQHandler+0x4a>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_UART_IRQHandler+0x4a>
    {
      UART_Receive_IT(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9ce 	bl	800239c <UART_Receive_IT>
      return;
 8002000:	e0da      	b.n	80021b8 <HAL_UART_IRQHandler+0x200>
    }
  }

  /* If some errors occur */
  if(   (errorflags != RESET)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80b9 	beq.w	800217c <HAL_UART_IRQHandler+0x1c4>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80ae 	beq.w	800217c <HAL_UART_IRQHandler+0x1c4>
  {

    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00e      	beq.n	8002048 <HAL_UART_IRQHandler+0x90>
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <HAL_UART_IRQHandler+0xb8>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2202      	movs	r2, #2
 8002062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002068:	f043 0204 	orr.w	r2, r3, #4
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00e      	beq.n	8002098 <HAL_UART_IRQHandler+0xe0>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2204      	movs	r2, #4
 800208a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002090:	f043 0202 	orr.w	r2, r3, #2
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d013      	beq.n	80020ca <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d104      	bne.n	80020b6 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2208      	movs	r2, #8
 80020bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020c2:	f043 0208 	orr.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d071      	beq.n	80021b6 <HAL_UART_IRQHandler+0x1fe>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_UART_IRQHandler+0x134>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_UART_IRQHandler+0x134>
      {
        UART_Receive_IT(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f958 	bl	800239c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_UART_IRQHandler+0x14e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002102:	2b00      	cmp	r3, #0
 8002104:	d031      	beq.n	800216a <HAL_UART_IRQHandler+0x1b2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f9b3 	bl	8002472 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d023      	beq.n	8002162 <HAL_UART_IRQHandler+0x1aa>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	6892      	ldr	r2, [r2, #8]
 8002124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002128:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800212e:	2b00      	cmp	r3, #0
 8002130:	d013      	beq.n	800215a <HAL_UART_IRQHandler+0x1a2>
          {
            /* Set the UART DMA Abort callback :
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002136:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <HAL_UART_IRQHandler+0x208>)
 8002138:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fb7d 	bl	800083e <HAL_DMA_Abort_IT>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_UART_IRQHandler+0x1c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002154:	4610      	mov	r0, r2
 8002156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002158:	e00e      	b.n	8002178 <HAL_UART_IRQHandler+0x1c0>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8a6 	bl	80022ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002160:	e00a      	b.n	8002178 <HAL_UART_IRQHandler+0x1c0>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8a2 	bl	80022ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002168:	e006      	b.n	8002178 <HAL_UART_IRQHandler+0x1c0>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f89e 	bl	80022ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8002176:	e01e      	b.n	80021b6 <HAL_UART_IRQHandler+0x1fe>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002178:	bf00      	nop
    return;
 800217a:	e01c      	b.n	80021b6 <HAL_UART_IRQHandler+0x1fe>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b00      	cmp	r3, #0
 8002184:	d008      	beq.n	8002198 <HAL_UART_IRQHandler+0x1e0>
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_UART_IRQHandler+0x1e0>
  {
    UART_Transmit_IT(huart);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f895 	bl	80022c0 <UART_Transmit_IT>
    return;
 8002196:	e00f      	b.n	80021b8 <HAL_UART_IRQHandler+0x200>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_UART_IRQHandler+0x200>
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_UART_IRQHandler+0x200>
  {
    UART_EndTransmit_IT(huart);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8dd 	bl	800236c <UART_EndTransmit_IT>
    return;
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <HAL_UART_IRQHandler+0x200>
    return;
 80021b6:	bf00      	nop
  }

}
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08002259 	.word	0x08002259

080021c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d4:	e02c      	b.n	8002230 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d028      	beq.n	8002230 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80021e4:	f7fe f9ea 	bl	80005bc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	1ad2      	subs	r2, r2, r3
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d31d      	bcc.n	8002230 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002202:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	6892      	ldr	r2, [r2, #8]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00f      	b.n	8002250 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	401a      	ands	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	429a      	cmp	r2, r3
 800224c:	d0c3      	beq.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <UART_DMAAbortOnError>:
  *        (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f818 	bl	80022ac <HAL_UART_ErrorCallback>
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_UART_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param huart uart handle
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b21      	cmp	r3, #33	; 0x21
 80022d2:	d144      	bne.n	800235e <UART_Transmit_IT+0x9e>
  {

    if(huart->TxXferCount == 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d111      	bne.n	8002304 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ee:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e02d      	b.n	8002360 <UART_Transmit_IT+0xa0>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	d113      	bne.n	8002336 <UART_Transmit_IT+0x76>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <UART_Transmit_IT+0x76>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	8812      	ldrh	r2, [r2, #0]
 8002324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002328:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	1c9a      	adds	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c
 8002334:	e008      	b.n	8002348 <UART_Transmit_IT+0x88>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	1c58      	adds	r0, r3, #1
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	64c8      	str	r0, [r1, #76]	; 0x4c
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	6293      	str	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <UART_Transmit_IT+0xa0>
    }
  }
  else
  {
    return HAL_BUSY;
 800235e:	2302      	movs	r3, #2
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002382:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff79 	bl	8002284 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80023aa:	81fb      	strh	r3, [r7, #14]

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b22      	cmp	r3, #34	; 0x22
 80023b6:	d14f      	bne.n	8002458 <UART_Receive_IT+0xbc>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d115      	bne.n	80023ee <UART_Receive_IT+0x52>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d111      	bne.n	80023ee <UART_Receive_IT+0x52>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	89fb      	ldrh	r3, [r7, #14]
 80023da:	4013      	ands	r3, r2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	1c9a      	adds	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
 80023ec:	e00d      	b.n	800240a <UART_Receive_IT+0x6e>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	1c59      	adds	r1, r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6551      	str	r1, [r2, #84]	; 0x54
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023fe:	b2d1      	uxtb	r1, r2
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	400a      	ands	r2, r1
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29b      	uxth	r3, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4619      	mov	r1, r3
 800241a:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <UART_Receive_IT+0xb8>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002430:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	6892      	ldr	r2, [r2, #8]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff24 	bl	8002298 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e00a      	b.n	800246a <UART_Receive_IT+0xce>
    }

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e008      	b.n	800246a <UART_Receive_IT+0xce>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	6992      	ldr	r2, [r2, #24]
 8002462:	f042 0208 	orr.w	r2, r2, #8
 8002466:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002488:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	6892      	ldr	r2, [r2, #8]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80024bc:	2310      	movs	r3, #16
 80024be:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	4baa      	ldr	r3, [pc, #680]	; (8002798 <UART_SetConfig+0x2e8>)
 80024f0:	400b      	ands	r3, r1
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	6852      	ldr	r2, [r2, #4]
 8002502:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a9a      	ldr	r2, [pc, #616]	; (800279c <UART_SetConfig+0x2ec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d11f      	bne.n	8002578 <UART_SetConfig+0xc8>
 8002538:	4b99      	ldr	r3, [pc, #612]	; (80027a0 <UART_SetConfig+0x2f0>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	f200 813e 	bhi.w	80027c4 <UART_SetConfig+0x314>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <UART_SetConfig+0xa0>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002561 	.word	0x08002561
 8002554:	0800256d 	.word	0x0800256d
 8002558:	08002567 	.word	0x08002567
 800255c:	08002573 	.word	0x08002573
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
 8002564:	e12e      	b.n	80027c4 <UART_SetConfig+0x314>
 8002566:	2302      	movs	r3, #2
 8002568:	75fb      	strb	r3, [r7, #23]
 800256a:	e12b      	b.n	80027c4 <UART_SetConfig+0x314>
 800256c:	2304      	movs	r3, #4
 800256e:	75fb      	strb	r3, [r7, #23]
 8002570:	e128      	b.n	80027c4 <UART_SetConfig+0x314>
 8002572:	2308      	movs	r3, #8
 8002574:	75fb      	strb	r3, [r7, #23]
 8002576:	e125      	b.n	80027c4 <UART_SetConfig+0x314>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a89      	ldr	r2, [pc, #548]	; (80027a4 <UART_SetConfig+0x2f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d130      	bne.n	80025e4 <UART_SetConfig+0x134>
 8002582:	4b87      	ldr	r3, [pc, #540]	; (80027a0 <UART_SetConfig+0x2f0>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b0c      	cmp	r3, #12
 800258e:	f200 8119 	bhi.w	80027c4 <UART_SetConfig+0x314>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <UART_SetConfig+0xe8>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080027c5 	.word	0x080027c5
 80025a0:	080027c5 	.word	0x080027c5
 80025a4:	080027c5 	.word	0x080027c5
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080027c5 	.word	0x080027c5
 80025b0:	080027c5 	.word	0x080027c5
 80025b4:	080027c5 	.word	0x080027c5
 80025b8:	080025d3 	.word	0x080025d3
 80025bc:	080027c5 	.word	0x080027c5
 80025c0:	080027c5 	.word	0x080027c5
 80025c4:	080027c5 	.word	0x080027c5
 80025c8:	080025df 	.word	0x080025df
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
 80025d0:	e0f8      	b.n	80027c4 <UART_SetConfig+0x314>
 80025d2:	2302      	movs	r3, #2
 80025d4:	75fb      	strb	r3, [r7, #23]
 80025d6:	e0f5      	b.n	80027c4 <UART_SetConfig+0x314>
 80025d8:	2304      	movs	r3, #4
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	e0f2      	b.n	80027c4 <UART_SetConfig+0x314>
 80025de:	2308      	movs	r3, #8
 80025e0:	75fb      	strb	r3, [r7, #23]
 80025e2:	e0ef      	b.n	80027c4 <UART_SetConfig+0x314>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <UART_SetConfig+0x2f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11c      	bne.n	8002628 <UART_SetConfig+0x178>
 80025ee:	4b6c      	ldr	r3, [pc, #432]	; (80027a0 <UART_SetConfig+0x2f0>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80025f8:	2b10      	cmp	r3, #16
 80025fa:	d00f      	beq.n	800261c <UART_SetConfig+0x16c>
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d802      	bhi.n	8002606 <UART_SetConfig+0x156>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <UART_SetConfig+0x160>
 8002604:	e0de      	b.n	80027c4 <UART_SetConfig+0x314>
 8002606:	2b20      	cmp	r3, #32
 8002608:	d005      	beq.n	8002616 <UART_SetConfig+0x166>
 800260a:	2b30      	cmp	r3, #48	; 0x30
 800260c:	d009      	beq.n	8002622 <UART_SetConfig+0x172>
 800260e:	e0d9      	b.n	80027c4 <UART_SetConfig+0x314>
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]
 8002614:	e0d6      	b.n	80027c4 <UART_SetConfig+0x314>
 8002616:	2302      	movs	r3, #2
 8002618:	75fb      	strb	r3, [r7, #23]
 800261a:	e0d3      	b.n	80027c4 <UART_SetConfig+0x314>
 800261c:	2304      	movs	r3, #4
 800261e:	75fb      	strb	r3, [r7, #23]
 8002620:	e0d0      	b.n	80027c4 <UART_SetConfig+0x314>
 8002622:	2308      	movs	r3, #8
 8002624:	75fb      	strb	r3, [r7, #23]
 8002626:	e0cd      	b.n	80027c4 <UART_SetConfig+0x314>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <UART_SetConfig+0x2fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11c      	bne.n	800266c <UART_SetConfig+0x1bc>
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <UART_SetConfig+0x2f0>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d00f      	beq.n	8002660 <UART_SetConfig+0x1b0>
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d802      	bhi.n	800264a <UART_SetConfig+0x19a>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <UART_SetConfig+0x1a4>
 8002648:	e0bc      	b.n	80027c4 <UART_SetConfig+0x314>
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d005      	beq.n	800265a <UART_SetConfig+0x1aa>
 800264e:	2bc0      	cmp	r3, #192	; 0xc0
 8002650:	d009      	beq.n	8002666 <UART_SetConfig+0x1b6>
 8002652:	e0b7      	b.n	80027c4 <UART_SetConfig+0x314>
 8002654:	2300      	movs	r3, #0
 8002656:	75fb      	strb	r3, [r7, #23]
 8002658:	e0b4      	b.n	80027c4 <UART_SetConfig+0x314>
 800265a:	2302      	movs	r3, #2
 800265c:	75fb      	strb	r3, [r7, #23]
 800265e:	e0b1      	b.n	80027c4 <UART_SetConfig+0x314>
 8002660:	2304      	movs	r3, #4
 8002662:	75fb      	strb	r3, [r7, #23]
 8002664:	e0ae      	b.n	80027c4 <UART_SetConfig+0x314>
 8002666:	2308      	movs	r3, #8
 8002668:	75fb      	strb	r3, [r7, #23]
 800266a:	e0ab      	b.n	80027c4 <UART_SetConfig+0x314>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a4f      	ldr	r2, [pc, #316]	; (80027b0 <UART_SetConfig+0x300>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d120      	bne.n	80026b8 <UART_SetConfig+0x208>
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <UART_SetConfig+0x2f0>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d012      	beq.n	80026ac <UART_SetConfig+0x1fc>
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	d802      	bhi.n	8002692 <UART_SetConfig+0x1e2>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <UART_SetConfig+0x1f0>
 8002690:	e098      	b.n	80027c4 <UART_SetConfig+0x314>
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	d006      	beq.n	80026a6 <UART_SetConfig+0x1f6>
 8002698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800269c:	d009      	beq.n	80026b2 <UART_SetConfig+0x202>
 800269e:	e091      	b.n	80027c4 <UART_SetConfig+0x314>
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
 80026a4:	e08e      	b.n	80027c4 <UART_SetConfig+0x314>
 80026a6:	2302      	movs	r3, #2
 80026a8:	75fb      	strb	r3, [r7, #23]
 80026aa:	e08b      	b.n	80027c4 <UART_SetConfig+0x314>
 80026ac:	2304      	movs	r3, #4
 80026ae:	75fb      	strb	r3, [r7, #23]
 80026b0:	e088      	b.n	80027c4 <UART_SetConfig+0x314>
 80026b2:	2308      	movs	r3, #8
 80026b4:	75fb      	strb	r3, [r7, #23]
 80026b6:	e085      	b.n	80027c4 <UART_SetConfig+0x314>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <UART_SetConfig+0x304>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d120      	bne.n	8002704 <UART_SetConfig+0x254>
 80026c2:	4b37      	ldr	r3, [pc, #220]	; (80027a0 <UART_SetConfig+0x2f0>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d0:	d012      	beq.n	80026f8 <UART_SetConfig+0x248>
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d6:	d802      	bhi.n	80026de <UART_SetConfig+0x22e>
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <UART_SetConfig+0x23c>
 80026dc:	e072      	b.n	80027c4 <UART_SetConfig+0x314>
 80026de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e2:	d006      	beq.n	80026f2 <UART_SetConfig+0x242>
 80026e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026e8:	d009      	beq.n	80026fe <UART_SetConfig+0x24e>
 80026ea:	e06b      	b.n	80027c4 <UART_SetConfig+0x314>
 80026ec:	2301      	movs	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
 80026f0:	e068      	b.n	80027c4 <UART_SetConfig+0x314>
 80026f2:	2302      	movs	r3, #2
 80026f4:	75fb      	strb	r3, [r7, #23]
 80026f6:	e065      	b.n	80027c4 <UART_SetConfig+0x314>
 80026f8:	2304      	movs	r3, #4
 80026fa:	75fb      	strb	r3, [r7, #23]
 80026fc:	e062      	b.n	80027c4 <UART_SetConfig+0x314>
 80026fe:	2308      	movs	r3, #8
 8002700:	75fb      	strb	r3, [r7, #23]
 8002702:	e05f      	b.n	80027c4 <UART_SetConfig+0x314>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <UART_SetConfig+0x308>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d120      	bne.n	8002750 <UART_SetConfig+0x2a0>
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <UART_SetConfig+0x2f0>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800271c:	d012      	beq.n	8002744 <UART_SetConfig+0x294>
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d802      	bhi.n	800272a <UART_SetConfig+0x27a>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <UART_SetConfig+0x288>
 8002728:	e04c      	b.n	80027c4 <UART_SetConfig+0x314>
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272e:	d006      	beq.n	800273e <UART_SetConfig+0x28e>
 8002730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002734:	d009      	beq.n	800274a <UART_SetConfig+0x29a>
 8002736:	e045      	b.n	80027c4 <UART_SetConfig+0x314>
 8002738:	2300      	movs	r3, #0
 800273a:	75fb      	strb	r3, [r7, #23]
 800273c:	e042      	b.n	80027c4 <UART_SetConfig+0x314>
 800273e:	2302      	movs	r3, #2
 8002740:	75fb      	strb	r3, [r7, #23]
 8002742:	e03f      	b.n	80027c4 <UART_SetConfig+0x314>
 8002744:	2304      	movs	r3, #4
 8002746:	75fb      	strb	r3, [r7, #23]
 8002748:	e03c      	b.n	80027c4 <UART_SetConfig+0x314>
 800274a:	2308      	movs	r3, #8
 800274c:	75fb      	strb	r3, [r7, #23]
 800274e:	e039      	b.n	80027c4 <UART_SetConfig+0x314>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <UART_SetConfig+0x30c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d135      	bne.n	80027c6 <UART_SetConfig+0x316>
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <UART_SetConfig+0x2f0>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002768:	d012      	beq.n	8002790 <UART_SetConfig+0x2e0>
 800276a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276e:	d802      	bhi.n	8002776 <UART_SetConfig+0x2c6>
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <UART_SetConfig+0x2d4>
 8002774:	e026      	b.n	80027c4 <UART_SetConfig+0x314>
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277a:	d006      	beq.n	800278a <UART_SetConfig+0x2da>
 800277c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002780:	d01e      	beq.n	80027c0 <UART_SetConfig+0x310>
 8002782:	e01f      	b.n	80027c4 <UART_SetConfig+0x314>
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
 8002788:	e01c      	b.n	80027c4 <UART_SetConfig+0x314>
 800278a:	2302      	movs	r3, #2
 800278c:	75fb      	strb	r3, [r7, #23]
 800278e:	e019      	b.n	80027c4 <UART_SetConfig+0x314>
 8002790:	2304      	movs	r3, #4
 8002792:	75fb      	strb	r3, [r7, #23]
 8002794:	e016      	b.n	80027c4 <UART_SetConfig+0x314>
 8002796:	bf00      	nop
 8002798:	efff69f3 	.word	0xefff69f3
 800279c:	40011000 	.word	0x40011000
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40004400 	.word	0x40004400
 80027a8:	40004800 	.word	0x40004800
 80027ac:	40004c00 	.word	0x40004c00
 80027b0:	40005000 	.word	0x40005000
 80027b4:	40011400 	.word	0x40011400
 80027b8:	40007800 	.word	0x40007800
 80027bc:	40007c00 	.word	0x40007c00
 80027c0:	2308      	movs	r3, #8
 80027c2:	75fb      	strb	r3, [r7, #23]
 80027c4:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ce:	d16c      	bne.n	80028aa <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d854      	bhi.n	8002880 <UART_SetConfig+0x3d0>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <UART_SetConfig+0x32c>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002801 	.word	0x08002801
 80027e0:	0800281d 	.word	0x0800281d
 80027e4:	08002839 	.word	0x08002839
 80027e8:	08002881 	.word	0x08002881
 80027ec:	0800284f 	.word	0x0800284f
 80027f0:	08002881 	.word	0x08002881
 80027f4:	08002881 	.word	0x08002881
 80027f8:	08002881 	.word	0x08002881
 80027fc:	0800286b 	.word	0x0800286b
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002800:	f7fe fe26 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8002804:	4603      	mov	r3, r0
 8002806:	005a      	lsls	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	441a      	add	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	82bb      	strh	r3, [r7, #20]
      break;
 800281a:	e034      	b.n	8002886 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800281c:	f7fe fe2c 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8002820:	4603      	mov	r3, r0
 8002822:	005a      	lsls	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	82bb      	strh	r3, [r7, #20]
      break;
 8002836:	e026      	b.n	8002886 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	085a      	lsrs	r2, r3, #1
 800283e:	4b51      	ldr	r3, [pc, #324]	; (8002984 <UART_SetConfig+0x4d4>)
 8002840:	4413      	add	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6852      	ldr	r2, [r2, #4]
 8002846:	fbb3 f3f2 	udiv	r3, r3, r2
 800284a:	82bb      	strh	r3, [r7, #20]
      break;
 800284c:	e01b      	b.n	8002886 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800284e:	f7fe fd1b 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8002852:	4603      	mov	r3, r0
 8002854:	005a      	lsls	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	82bb      	strh	r3, [r7, #20]
      break;
 8002868:	e00d      	b.n	8002886 <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	82bb      	strh	r3, [r7, #20]
      break;
 800287e:	e002      	b.n	8002886 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	74fb      	strb	r3, [r7, #19]
      break;
 8002884:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	f023 030f 	bic.w	r3, r3, #15
 800288c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800288e:	8abb      	ldrh	r3, [r7, #20]
 8002890:	105b      	asrs	r3, r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	b29a      	uxth	r2, r3
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	4313      	orrs	r3, r2
 800289e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	897a      	ldrh	r2, [r7, #10]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e067      	b.n	800297a <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d861      	bhi.n	8002974 <UART_SetConfig+0x4c4>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <UART_SetConfig+0x408>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028fd 	.word	0x080028fd
 80028c0:	0800291d 	.word	0x0800291d
 80028c4:	08002975 	.word	0x08002975
 80028c8:	08002939 	.word	0x08002939
 80028cc:	08002975 	.word	0x08002975
 80028d0:	08002975 	.word	0x08002975
 80028d4:	08002975 	.word	0x08002975
 80028d8:	08002959 	.word	0x08002959
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681c      	ldr	r4, [r3, #0]
 80028e0:	f7fe fdb6 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	441a      	add	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	60e3      	str	r3, [r4, #12]
      break;
 80028fa:	e03e      	b.n	800297a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681c      	ldr	r4, [r3, #0]
 8002900:	f7fe fdba 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8002904:	4602      	mov	r2, r0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	441a      	add	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	b29b      	uxth	r3, r3
 8002918:	60e3      	str	r3, [r4, #12]
      break;
 800291a:	e02e      	b.n	800297a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	0859      	lsrs	r1, r3, #1
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <UART_SetConfig+0x4d8>)
 8002928:	440b      	add	r3, r1
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	6849      	ldr	r1, [r1, #4]
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	b29b      	uxth	r3, r3
 8002934:	60d3      	str	r3, [r2, #12]
      break;
 8002936:	e020      	b.n	800297a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681c      	ldr	r4, [r3, #0]
 800293c:	f7fe fca4 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	085b      	lsrs	r3, r3, #1
 8002948:	441a      	add	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	60e3      	str	r3, [r4, #12]
      break;
 8002956:	e010      	b.n	800297a <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6852      	ldr	r2, [r2, #4]
 8002960:	0852      	lsrs	r2, r2, #1
 8002962:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6852      	ldr	r2, [r2, #4]
 800296a:	fbb1 f2f2 	udiv	r2, r1, r2
 800296e:	b292      	uxth	r2, r2
 8002970:	60da      	str	r2, [r3, #12]
      break;
 8002972:	e002      	b.n	800297a <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	74fb      	strb	r3, [r7, #19]
      break;
 8002978:	bf00      	nop
    }
  }

  return ret;
 800297a:	7cfb      	ldrb	r3, [r7, #19]

}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	01e84800 	.word	0x01e84800
 8002988:	00f42400 	.word	0x00f42400

0800298c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	6852      	ldr	r2, [r2, #4]
 80029aa:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	6852      	ldr	r2, [r2, #4]
 80029cc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029d4:	430a      	orrs	r2, r1
 80029d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	6852      	ldr	r2, [r2, #4]
 8002a10:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01a      	beq.n	8002aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	6852      	ldr	r2, [r2, #4]
 8002a76:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a8a:	d10a      	bne.n	8002aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	6852      	ldr	r2, [r2, #4]
 8002a96:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ae2:	f7fd fd6b 	bl	80005bc <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d10e      	bne.n	8002b14 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fb5d 	bl	80021c4 <UART_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e00c      	b.n	8002b2e <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b3e:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	4a0f      	ldr	r2, [pc, #60]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_GPIO_Init+0x5c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]

}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800

08002b98 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b9c:	f7fd fcbc 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ba0:	f000 f820 	bl	8002be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ba4:	f7ff ffc8 	bl	8002b38 <MX_GPIO_Init>
  MX_UART5_Init();
 8002ba8:	f000 f994 	bl	8002ed4 <MX_UART5_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  __HAL_UART_ENABLE_IT(&huart5,UART_IT_RXNE);
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <main+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <main+0x40>)
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	f042 0220 	orr.w	r2, r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
  while (1)
  {

  /* USER CODE END WHILE */

	  if(Rx_Flag==1)
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <main+0x44>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d1fb      	bne.n	8002bbc <main+0x24>
	  {
		  HAL_UART_Transmit(&huart5,"TOLGA iSKENDER Reyizdir",24,100);
 8002bc4:	2364      	movs	r3, #100	; 0x64
 8002bc6:	2218      	movs	r2, #24
 8002bc8:	4905      	ldr	r1, [pc, #20]	; (8002be0 <main+0x48>)
 8002bca:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <main+0x40>)
 8002bcc:	f7ff f8a7 	bl	8001d1e <HAL_UART_Transmit>
		  Rx_Flag=0;
 8002bd0:	4b02      	ldr	r3, [pc, #8]	; (8002bdc <main+0x44>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	  if(Rx_Flag==1)
 8002bd6:	e7f1      	b.n	8002bbc <main+0x24>
 8002bd8:	20000048 	.word	0x20000048
 8002bdc:	2000002c 	.word	0x2000002c
 8002be0:	08003084 	.word	0x08003084

08002be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0b4      	sub	sp, #208	; 0xd0
 8002be8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <SystemClock_Config+0x114>)
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <SystemClock_Config+0x114>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <SystemClock_Config+0x114>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c02:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <SystemClock_Config+0x118>)
 8002c04:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <SystemClock_Config+0x118>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <SystemClock_Config+0x118>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c3a:	2304      	movs	r3, #4
 8002c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c40:	23a8      	movs	r3, #168	; 0xa8
 8002c42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c46:	2302      	movs	r3, #2
 8002c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c52:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd ffbe 	bl	8000bd8 <HAL_RCC_OscConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c62:	219e      	movs	r1, #158	; 0x9e
 8002c64:	4826      	ldr	r0, [pc, #152]	; (8002d00 <SystemClock_Config+0x11c>)
 8002c66:	f000 f84f 	bl	8002d08 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c90:	2105      	movs	r1, #5
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fa10 	bl	80010b8 <HAL_RCC_ClockConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <SystemClock_Config+0xc2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c9e:	21ac      	movs	r1, #172	; 0xac
 8002ca0:	4817      	ldr	r0, [pc, #92]	; (8002d00 <SystemClock_Config+0x11c>)
 8002ca2:	f000 f831 	bl	8002d08 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002caa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002cac:	2300      	movs	r3, #0
 8002cae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fbf3 	bl	80014a0 <HAL_RCCEx_PeriphCLKConfig>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <SystemClock_Config+0xe4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cc0:	21b3      	movs	r1, #179	; 0xb3
 8002cc2:	480f      	ldr	r0, [pc, #60]	; (8002d00 <SystemClock_Config+0x11c>)
 8002cc4:	f000 f820 	bl	8002d08 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002cc8:	f7fe fbb6 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <SystemClock_Config+0x120>)
 8002cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fd7b 	bl	80007d2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002cdc:	2004      	movs	r0, #4
 8002cde:	f7fd fd85 	bl	80007ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cea:	f7fd fd48 	bl	800077e <HAL_NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	37d0      	adds	r7, #208	; 0xd0
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	0800309c 	.word	0x0800309c
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002d12:	e7fe      	b.n	8002d12 <_Error_Handler+0xa>

08002d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_MspInit+0x98>)
 8002d1c:	4b23      	ldr	r3, [pc, #140]	; (8002dac <HAL_MspInit+0x98>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_MspInit+0x98>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_MspInit+0x98>)
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_MspInit+0x98>)
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_MspInit+0x98>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	f7fd fd0c 	bl	8000768 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	f06f 000b 	mvn.w	r0, #11
 8002d58:	f7fd fd11 	bl	800077e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f06f 000a 	mvn.w	r0, #10
 8002d64:	f7fd fd0b 	bl	800077e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	f06f 0009 	mvn.w	r0, #9
 8002d70:	f7fd fd05 	bl	800077e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2100      	movs	r1, #0
 8002d78:	f06f 0004 	mvn.w	r0, #4
 8002d7c:	f7fd fcff 	bl	800077e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2100      	movs	r1, #0
 8002d84:	f06f 0003 	mvn.w	r0, #3
 8002d88:	f7fd fcf9 	bl	800077e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f06f 0001 	mvn.w	r0, #1
 8002d94:	f7fd fcf3 	bl	800077e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7fd fced 	bl	800077e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40023800 	.word	0x40023800

08002db0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f7fd fbc6 	bl	8000594 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002e08:	f7fd fd0c 	bl	8000824 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <UART5_IRQHandler>:

/**
* @brief This function handles UART5 global interrupt.
*/
void UART5_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	HAL_UART_Receive(&huart5,(uint8_t*)Rx_Byte,1,100);
 8002e14:	2364      	movs	r3, #100	; 0x64
 8002e16:	2201      	movs	r2, #1
 8002e18:	490e      	ldr	r1, [pc, #56]	; (8002e54 <UART5_IRQHandler+0x44>)
 8002e1a:	480f      	ldr	r0, [pc, #60]	; (8002e58 <UART5_IRQHandler+0x48>)
 8002e1c:	f7ff f80a 	bl	8001e34 <HAL_UART_Receive>

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <UART5_IRQHandler+0x48>)
 8002e22:	f7ff f8c9 	bl	8001fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  Rx_Data[Rx_DataCnt++] = Rx_Byte[0];
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <UART5_IRQHandler+0x4c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	b2d1      	uxtb	r1, r2
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <UART5_IRQHandler+0x4c>)
 8002e30:	7011      	strb	r1, [r2, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <UART5_IRQHandler+0x44>)
 8002e36:	7819      	ldrb	r1, [r3, #0]
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <UART5_IRQHandler+0x50>)
 8002e3a:	5499      	strb	r1, [r3, r2]
  /* USER CODE END UART5_IRQn 1 */
  if(Rx_DataCnt>=10)
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <UART5_IRQHandler+0x4c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d905      	bls.n	8002e50 <UART5_IRQHandler+0x40>
  {
	  Rx_Flag=1;
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <UART5_IRQHandler+0x54>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
	  Rx_DataCnt=0;
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <UART5_IRQHandler+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  }
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000030 	.word	0x20000030
 8002e58:	20000048 	.word	0x20000048
 8002e5c:	2000002d 	.word	0x2000002d
 8002e60:	20000034 	.word	0x20000034
 8002e64:	2000002c 	.word	0x2000002c

08002e68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <SystemInit+0x5c>)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <SystemInit+0x5c>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <SystemInit+0x60>)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <SystemInit+0x60>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <SystemInit+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <SystemInit+0x60>)
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <SystemInit+0x60>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <SystemInit+0x64>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <SystemInit+0x60>)
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <SystemInit+0x68>)
 8002e9e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <SystemInit+0x60>)
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <SystemInit+0x60>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <SystemInit+0x60>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002eb2:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <SystemInit+0x5c>)
 8002eb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eb8:	609a      	str	r2, [r3, #8]
#endif
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	fef6ffff 	.word	0xfef6ffff
 8002ed0:	24003010 	.word	0x24003010

08002ed4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002eda:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <MX_UART5_Init+0x60>)
 8002edc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002eec:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002efa:	220c      	movs	r2, #12
 8002efc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f16:	4806      	ldr	r0, [pc, #24]	; (8002f30 <MX_UART5_Init+0x5c>)
 8002f18:	f7fe feb0 	bl	8001c7c <HAL_UART_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <MX_UART5_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f22:	2143      	movs	r1, #67	; 0x43
 8002f24:	4804      	ldr	r0, [pc, #16]	; (8002f38 <MX_UART5_Init+0x64>)
 8002f26:	f7ff feef 	bl	8002d08 <_Error_Handler>
  }

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000048 	.word	0x20000048
 8002f34:	40005000 	.word	0x40005000
 8002f38:	080030ac 	.word	0x080030ac

08002f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==UART5)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <HAL_UART_MspInit+0x84>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d134      	bne.n	8002fb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_UART_MspInit+0x88>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4619      	mov	r1, r3
 8002f82:	4811      	ldr	r0, [pc, #68]	; (8002fc8 <HAL_UART_MspInit+0x8c>)
 8002f84:	f7fd fc7e 	bl	8000884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f98:	2308      	movs	r3, #8
 8002f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480a      	ldr	r0, [pc, #40]	; (8002fcc <HAL_UART_MspInit+0x90>)
 8002fa4:	f7fd fc6e 	bl	8000884 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2035      	movs	r0, #53	; 0x35
 8002fae:	f7fd fbe6 	bl	800077e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002fb2:	2035      	movs	r0, #53	; 0x35
 8002fb4:	f7fd fbff 	bl	80007b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40005000 	.word	0x40005000
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00

08002fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002fd6:	e003      	b.n	8002fe0 <LoopCopyDataInit>

08002fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002fde:	3104      	adds	r1, #4

08002fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002fe0:	480b      	ldr	r0, [pc, #44]	; (8003010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002fe8:	d3f6      	bcc.n	8002fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002fec:	e002      	b.n	8002ff4 <LoopFillZerobss>

08002fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ff0:	f842 3b04 	str.w	r3, [r2], #4

08002ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ff4:	4b09      	ldr	r3, [pc, #36]	; (800301c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ff8:	d3f9      	bcc.n	8002fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ffa:	f7ff ff35 	bl	8002e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f000 f811 	bl	8003024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003002:	f7ff fdc9 	bl	8002b98 <main>
  bx  lr    
 8003006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003008:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800300c:	080030e4 	.word	0x080030e4
  ldr  r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003014:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003018:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800301c:	200000b8 	.word	0x200000b8

08003020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <ADC_IRQHandler>
	...

08003024 <__libc_init_array>:
 8003024:	b570      	push	{r4, r5, r6, lr}
 8003026:	4e0d      	ldr	r6, [pc, #52]	; (800305c <__libc_init_array+0x38>)
 8003028:	4c0d      	ldr	r4, [pc, #52]	; (8003060 <__libc_init_array+0x3c>)
 800302a:	1ba4      	subs	r4, r4, r6
 800302c:	10a4      	asrs	r4, r4, #2
 800302e:	2500      	movs	r5, #0
 8003030:	42a5      	cmp	r5, r4
 8003032:	d109      	bne.n	8003048 <__libc_init_array+0x24>
 8003034:	4e0b      	ldr	r6, [pc, #44]	; (8003064 <__libc_init_array+0x40>)
 8003036:	4c0c      	ldr	r4, [pc, #48]	; (8003068 <__libc_init_array+0x44>)
 8003038:	f000 f818 	bl	800306c <_init>
 800303c:	1ba4      	subs	r4, r4, r6
 800303e:	10a4      	asrs	r4, r4, #2
 8003040:	2500      	movs	r5, #0
 8003042:	42a5      	cmp	r5, r4
 8003044:	d105      	bne.n	8003052 <__libc_init_array+0x2e>
 8003046:	bd70      	pop	{r4, r5, r6, pc}
 8003048:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800304c:	4798      	blx	r3
 800304e:	3501      	adds	r5, #1
 8003050:	e7ee      	b.n	8003030 <__libc_init_array+0xc>
 8003052:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003056:	4798      	blx	r3
 8003058:	3501      	adds	r5, #1
 800305a:	e7f2      	b.n	8003042 <__libc_init_array+0x1e>
 800305c:	080030dc 	.word	0x080030dc
 8003060:	080030dc 	.word	0x080030dc
 8003064:	080030dc 	.word	0x080030dc
 8003068:	080030e0 	.word	0x080030e0

0800306c <_init>:
 800306c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306e:	bf00      	nop
 8003070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003072:	bc08      	pop	{r3}
 8003074:	469e      	mov	lr, r3
 8003076:	4770      	bx	lr

08003078 <_fini>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr
